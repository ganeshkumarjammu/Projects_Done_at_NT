//Working except the error with the creating notepad and text file
using System;
using System.IO;
using System.IO.Ports;
using System.Windows.Forms;
using ClosedXML.Excel;
using static System.Net.Mime.MediaTypeNames;

namespace Wing
{
    public partial class Wing : Form
    {
        private bool isReading = false;

        public Wing()
        {
            InitializeComponent();
        }

        private void scanBT_Click(object sender, EventArgs e)
        {
            PortCB.Text = "";
            PortCB.Items.Clear();
            String[] ports = SerialPort.GetPortNames();
            PortCB.Items.AddRange(ports);
        }

        private void connectBT_Click(object sender, EventArgs e)
        {
            if (ConnectPort())
            {
                connectBT.Enabled = false;
                disconnectBT.Enabled = true;
                PortCB.Enabled = false;
                Baudrate.Enabled = false;
                //sendBT.Enabled = true;
                isReading = true;
            }
        }

        public bool ConnectPort()
        {
            try
            {
                if (!string.IsNullOrEmpty(PortCB.Text) && !string.IsNullOrEmpty(Baudrate.Text))
                {
                    if (serialPort1.IsOpen)
                    {
                        serialPort1.Close();
                    }
                    serialPort1.PortName = PortCB.Text;
                    serialPort1.BaudRate = Int32.Parse(Baudrate.Text);
                    serialPort1.DataReceived += new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    serialPort1.Open();
                    return true;
                }
                else
                {
                    MessageBox.Show("Please select a port and baud rate.", "Error", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
            }
            return false;
        }

        private void disconnectBT_Click(object sender, EventArgs e)
        {
            DisconnectPort();
            Console.WriteLine($"Incoming Text: {incomingTB.Text}");
            var dir = (tbFolder.Text == "") ? @"C:\Users\jammu\OneDrive\Desktop\CS\" : tbFolder.Text;  // folder location
            String baseFileName = (tbFile.Text == "") ? "WingFinlog" : tbFile.Text;
            string fileExtension = ".txt";
            string newFileName = GetUniqueFileName(dir, baseFileName, fileExtension);
            string newFilePath = Path.Combine(dir, newFileName);
            // string folder = Path.Combine(dir, "log");
            // if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
            // string file = Path.Combine(folder, "log2.txt");
            File.WriteAllText(newFileName, incomingTB.Text);
            Console.WriteLine($"File created: {newFilePath}");
            // createFile();
            /*
                        var workbook = new XLWorkbook();
                        var worksheet = workbook.Worksheets.Add("Sheet1");

                        // Add headers
                        worksheet.Cell("A1").Value = "Name";
                        worksheet.Cell("B1").Value = "Age";
                        worksheet.Cell("C1").Value = "City";

                        // Example data
                        worksheet.Cell("A2").Value = "Ben";
                        worksheet.Cell("B2").Value = 20;
                        worksheet.Cell("C2").Value = incomingTB.Text;


                        string file1 = Path.Combine(dir, "MyExcelFile1.xlsx");

                        // Save the workbook
                        workbook.SaveAs(file1);
                        Console.WriteLine($"Excel file saved at: {file}");
                        // Close the workbook
                        workbook.Dispose();          
             */
            connectBT.Enabled = true;
            disconnectBT.Enabled = false;
            PortCB.Enabled = true;
            Baudrate.Enabled = true;
           // sendBT.Enabled = false;
            incomingTB.Text = "";
        }

        public void createFile()
        {
            var dir = (tbFolder.Text=="") ? @"C:\Users\jammu\OneDrive\Desktop\CS\": tbFolder.Text;  // folder location
            String baseFileName = (tbFile.Text =="")? "WingFinlog" : tbFile.Text;
            string fileExtension = ".txt";
            string newFileName = GetUniqueFileName(dir, baseFileName, fileExtension);
            string newFilePath = Path.Combine(dir, newFileName);
            // string folder = Path.Combine(dir, "log");
            // if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
            // string file = Path.Combine(folder, "log2.txt");
            File.WriteAllText(newFileName, incomingTB.Text);
            Console.WriteLine($"File created: {newFilePath}");
        }

        static string GetUniqueFileName(string folderPath, string baseFileName, string fileExtension)
        {
            string fileName = baseFileName + fileExtension;
            int counter = 1;

            while (File.Exists(Path.Combine(folderPath, fileName)))
            {
                fileName = $"{baseFileName}{counter}{fileExtension}";
                counter++;
            }

            return fileName;
        }

        private void DisconnectPort()
        {
            isReading = false;
            if (serialPort1.IsOpen)
            {
                try
                {
                    serialPort1.DataReceived -= serialPort1_DataReceived;
                    serialPort1.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
                }

            }
        }

        private void serialPort1_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            if (isReading)
            {
                try
                {
                    string dump = serialPort1.ReadLine();
                    this.Invoke(new Action(() => ProcessData(dump)));
                }
                catch (TimeoutException) { }
                catch (IOException) { }
                catch (InvalidOperationException) { }
            }
        }

        private void ProcessData(string data)
        {
            incomingTB.AppendText(data + Environment.NewLine);
            incomingTB.ScrollToCaret();
        }

        private void clearBT_Click(object sender, EventArgs e)
        {
            incomingTB.Text = "";

        }

 /*      
        private void sendBT_Click(object sender, EventArgs e)
        {
            try
            {
                if (serialPort1.IsOpen)
                {
                    serialPort1.Write(outgoingTB.Text);
                    outgoingTB.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
            }
        }
 */

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            DisconnectPort();
            base.OnFormClosing(e);
        }

        private void Wing_Load(object sender, EventArgs e)
        {
            //loading ports by default
            PortCB.Text = "";
            PortCB.Items.Clear();
            String[] ports = SerialPort.GetPortNames();
            PortCB.Items.AddRange(ports);

        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog folder = new FolderBrowserDialog();
            DialogResult result = folder.ShowDialog();
            if (result == DialogResult.OK)
            {
                tbFolder.Text = folder.SelectedPath;
            }
        }

    }
}
 using System;
using System.IO;
using System.IO.Ports;
using System.Windows.Forms;
using ClosedXML.Excel;
using static System.Net.Mime.MediaTypeNames;

namespace Wing
{
    public partial class Wing : Form
    {
        private bool isReading = false;

        public Wing()
        {
            InitializeComponent();
        }

        private void scanBT_Click(object sender, EventArgs e)
        {
            PortCB.Text = "";
            PortCB.Items.Clear();
            String[] ports = SerialPort.GetPortNames();
            PortCB.Items.AddRange(ports);
        }

        private void connectBT_Click(object sender, EventArgs e)
        {
            if (ConnectPort())
            {
                connectBT.Enabled = false;
                disconnectBT.Enabled = true;
                PortCB.Enabled = false;
                Baudrate.Enabled = false;
                //sendBT.Enabled = true;
                isReading = true;
            }
        }

        public bool ConnectPort()
        {
            try
            {
                if (!string.IsNullOrEmpty(PortCB.Text) && !string.IsNullOrEmpty(Baudrate.Text))
                {
                    if (serialPort1.IsOpen)
                    {
                        serialPort1.Close();
                    }
                    serialPort1.PortName = PortCB.Text;
                    serialPort1.BaudRate = Int32.Parse(Baudrate.Text);
                    serialPort1.DataReceived += new SerialDataReceivedEventHandler(serialPort1_DataReceived);
                    serialPort1.Open();
                    return true;
                }
                else
                {
                    MessageBox.Show("Please select a port and baud rate.", "Error", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
            }
            return false;
        }

        private void disconnectBT_Click(object sender, EventArgs e)
        {
            DisconnectPort();
            Console.WriteLine($"Incoming Text: {incomingTB.Text}");
            var dir = (tbFolder.Text == "") ? @"C:\Users\jammu\OneDrive\Desktop\CS\" : tbFolder.Text;  // folder location
            String baseFileName = (tbFile.Text == "") ? "WingFinlog" : tbFile.Text;
            string fileExtension = ".txt";
            string newFileName = GetUniqueFileName(dir, baseFileName, fileExtension);
            string newFilePath = Path.Combine(dir, newFileName);
            // string folder = Path.Combine(dir, "log");
            // if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
            // string file = Path.Combine(folder, "log2.txt");
            File.WriteAllText(newFileName, incomingTB.Text);
            Console.WriteLine($"File created: {newFilePath}");
            // createFile();
            /*
                        var workbook = new XLWorkbook();
                        var worksheet = workbook.Worksheets.Add("Sheet1");

                        // Add headers
                        worksheet.Cell("A1").Value = "Name";
                        worksheet.Cell("B1").Value = "Age";
                        worksheet.Cell("C1").Value = "City";

                        // Example data
                        worksheet.Cell("A2").Value = "Ben";
                        worksheet.Cell("B2").Value = 20;
                        worksheet.Cell("C2").Value = incomingTB.Text;


                        string file1 = Path.Combine(dir, "MyExcelFile1.xlsx");

                        // Save the workbook
                        workbook.SaveAs(file1);
                        Console.WriteLine($"Excel file saved at: {file}");
                        // Close the workbook
                        workbook.Dispose();          
             */
            connectBT.Enabled = true;
            disconnectBT.Enabled = false;
            PortCB.Enabled = true;
            Baudrate.Enabled = true;
           // sendBT.Enabled = false;
            incomingTB.Text = "";
        }

        public void createFile()
        {
            var dir = (tbFolder.Text=="") ? @"C:\Users\jammu\OneDrive\Desktop\CS\": tbFolder.Text;  // folder location
            String baseFileName = (tbFile.Text =="")? "WingFinlog" : tbFile.Text;
            string fileExtension = ".txt";
            string newFileName = GetUniqueFileName(dir, baseFileName, fileExtension);
            string newFilePath = Path.Combine(dir, newFileName);
            // string folder = Path.Combine(dir, "log");
            // if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);
            // string file = Path.Combine(folder, "log2.txt");
            File.WriteAllText(newFileName, incomingTB.Text);
            Console.WriteLine($"File created: {newFilePath}");
        }

        static string GetUniqueFileName(string folderPath, string baseFileName, string fileExtension)
        {
            string fileName = baseFileName + fileExtension;
            int counter = 1;

            while (File.Exists(Path.Combine(folderPath, fileName)))
            {
                fileName = $"{baseFileName}{counter}{fileExtension}";
                counter++;
            }

            return fileName;
        }

        private void DisconnectPort()
        {
            isReading = false;
            if (serialPort1.IsOpen)
            {
                try
                {
                    serialPort1.DataReceived -= serialPort1_DataReceived;
                    serialPort1.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
                }

            }
        }

        private void serialPort1_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            if (isReading)
            {
                try
                {
                    string dump = serialPort1.ReadLine();
                    this.Invoke(new Action(() => ProcessData(dump)));
                }
                catch (TimeoutException) { }
                catch (IOException) { }
                catch (InvalidOperationException) { }
            }
        }

        private void ProcessData(string data)
        {
            incomingTB.AppendText(data + Environment.NewLine);
            incomingTB.ScrollToCaret();
        }

        private void clearBT_Click(object sender, EventArgs e)
        {
            incomingTB.Text = "";

        }

 /*      
        private void sendBT_Click(object sender, EventArgs e)
        {
            try
            {
                if (serialPort1.IsOpen)
                {
                    serialPort1.Write(outgoingTB.Text);
                    outgoingTB.Text = "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK);
            }
        }
 */

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            DisconnectPort();
            base.OnFormClosing(e);
        }

        private void Wing_Load(object sender, EventArgs e)
        {
            //loading ports by default
            PortCB.Text = "";
            PortCB.Items.Clear();
            String[] ports = SerialPort.GetPortNames();
            PortCB.Items.AddRange(ports);

        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog folder = new FolderBrowserDialog();
            DialogResult result = folder.ShowDialog();
            if (result == DialogResult.OK)
            {
                tbFolder.Text = folder.SelectedPath;
            }
        }

    }
}
 